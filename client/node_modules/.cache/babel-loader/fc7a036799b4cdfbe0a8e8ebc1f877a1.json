{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nfunction identity(document) {\n  return document;\n}\nvar DocumentTransform = function () {\n  function DocumentTransform(transform, options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n    this.transform = transform;\n    if (options.getCacheKey) {\n      this.getCacheKey = options.getCacheKey;\n    }\n    if (options.cache !== false) {\n      this.stableCacheKeys = new Trie(canUseWeakMap, function (key) {\n        return {\n          key: key\n        };\n      });\n    }\n  }\n  DocumentTransform.prototype.getCacheKey = function (document) {\n    return [document];\n  };\n  DocumentTransform.identity = function () {\n    return new DocumentTransform(identity, {\n      cache: false\n    });\n  };\n  DocumentTransform.split = function (predicate, left, right) {\n    if (right === void 0) {\n      right = DocumentTransform.identity();\n    }\n    return new DocumentTransform(function (document) {\n      var documentTransform = predicate(document) ? left : right;\n      return documentTransform.transformDocument(document);\n    }, {\n      cache: false\n    });\n  };\n  DocumentTransform.prototype.transformDocument = function (document) {\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n    var cacheEntry = this.getStableCacheEntry(document);\n    if (cacheEntry && cacheEntry.value) {\n      return cacheEntry.value;\n    }\n    checkDocument(document);\n    var transformedDocument = this.transform(document);\n    this.resultCache.add(transformedDocument);\n    if (cacheEntry) {\n      cacheEntry.value = transformedDocument;\n    }\n    return transformedDocument;\n  };\n  DocumentTransform.prototype.concat = function (otherTransform) {\n    var _this = this;\n    return new DocumentTransform(function (document) {\n      return otherTransform.transformDocument(_this.transformDocument(document));\n    }, {\n      cache: false\n    });\n  };\n  DocumentTransform.prototype.getStableCacheEntry = function (document) {\n    if (!this.stableCacheKeys) return;\n    var cacheKeys = this.getCacheKey(document);\n    if (cacheKeys) {\n      invariant(Array.isArray(cacheKeys), 63);\n      return this.stableCacheKeys.lookupArray(cacheKeys);\n    }\n  };\n  return DocumentTransform;\n}();\nexport { DocumentTransform };","map":null,"metadata":{},"sourceType":"module"}