{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\bub2k\\\\bootcamp\\\\main-projects\\\\buonos-pizza-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\bub2k\\\\bootcamp\\\\main-projects\\\\buonos-pizza-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nfunction defaultDispose() {}\nexport var Cache = /*#__PURE__*/function () {\n  function Cache() {\n    var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    var dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;\n    _classCallCheck(this, Cache);\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n  _createClass(Cache, [{\n    key: \"has\",\n    value: function has(key) {\n      return this.map.has(key);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var node = this.getNode(key);\n      return node && node.value;\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(key) {\n      var node = this.map.get(key);\n      if (node && node !== this.newest) {\n        var older = node.older,\n          newer = node.newer;\n        if (newer) {\n          newer.older = older;\n        }\n        if (older) {\n          older.newer = newer;\n        }\n        node.older = this.newest;\n        node.older.newer = node;\n        node.newer = null;\n        this.newest = node;\n        if (node === this.oldest) {\n          this.oldest = newer;\n        }\n      }\n      return node;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var node = this.getNode(key);\n      if (node) {\n        return node.value = value;\n      }\n      node = {\n        key: key,\n        value: value,\n        newer: null,\n        older: this.newest\n      };\n      if (this.newest) {\n        this.newest.newer = node;\n      }\n      this.newest = node;\n      this.oldest = this.oldest || node;\n      this.map.set(key, node);\n      return node.value;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      while (this.oldest && this.map.size > this.max) {\n        this.delete(this.oldest.key);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var node = this.map.get(key);\n      if (node) {\n        if (node === this.newest) {\n          this.newest = node.older;\n        }\n        if (node === this.oldest) {\n          this.oldest = node.newer;\n        }\n        if (node.newer) {\n          node.newer.older = node.older;\n        }\n        if (node.older) {\n          node.older.newer = node.newer;\n        }\n        this.map.delete(key);\n        this.dispose(node.value, key);\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return Cache;\n}();","map":null,"metadata":{},"sourceType":"module"}